{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Home.js","CreateDeck.js","Deck.js","Study.js","EditDeck.js","AddCard.js","EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","Home","history","useHistory","useState","decks","setDecks","window","confirm","go","useEffect","abortController","AbortController","deckResponse","console","error","abort","fetchData","to","map","style","width","length","description","type","onClick","handleDelete","CreateDeck","newDeck","setNewDeck","handleChange","target","value","event","preventDefault","push","onSubmit","handleSubmit","onChange","handleCancel","Deck","useParams","setDeck","setCards","handleEditDeck","handleStudy","handleAddCard","handleDeleteDeck","front","back","handleEditCard","handleDeleteCard","Study","cardNumber","setCardNumber","isFront","flipCard","showNextButton","index","total","log","nextCard","notEnoughCards","EditDeck","AddCard","initialState","newCard","setNewCard","handleDone","EditCard","setCard","cardResponse","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.144f2752.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <header className=\"jumbotron bg-dark\">\n            <div className=\"container text-white\">\n                <h1 className=\"display-4\">\n                    Flashcard-o-matic\n                </h1>\n                <p className=\"lead\">\n                    Discover The Flashcard Difference.\n                </p>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n    return (\n        <div className=\"NotFound\">\n            <h1>Not Found</h1>\n        </div>\n    );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from \"react\"\nimport { listDecks, deleteDeck } from \"./utils/api/index\"\nimport { Link, useHistory } from \"react-router-dom\"\n\nfunction Home () {\n    const history = useHistory()\n    const [decks, setDecks] = useState([])\n    \n    useEffect (() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            try {\n                const deckResponse = await listDecks(abortController.signal)\n                setDecks(deckResponse)\n            } catch (error) {\n                console.error('Something went wrong', error)\n            }\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n\n    async function handleDelete(deck) {\n        if (window.confirm(`Delete this deck? You will not be able to recover it`)) {\n            history.go(0)\n            return await deleteDeck(deck.id)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <Link className=\"btn btn-secondary mb-2\" to=\"/decks/new\">\n                Create Deck\n            </Link>\n            <div className=\"card-deck\">\n                {decks.map((deck) => {\n                    return (\n                        <div className=\"card\" style={{ width: '30rem'}} key={deck.id}>\n                            <div className=\"card-body\">\n                                <div className=\"card-title\">\n                                    {`${deck.name}`}\n                                </div>\n                                <div className=\"card-subtitle mb-2 text-muted\">\n                                    {`${deck.cards.length} cards`}\n                                </div>\n                                <div className=\"card-text\">\n                                    {`${deck.description}`}\n                                </div>\n                                <Link className=\"btn btn-secondary mx-1\" to={`/decks/${deck.id}`}>\n                                    View\n                                </Link>\n                                <Link className=\"btn btn-primary mx-1\" to={`/decks/${deck.id}/study`}>\n                                    Study\n                                </Link>\n                                <button type=\"button\" className=\"btn btn-danger mx-1\" onClick={() => handleDelete(deck)}>\n                                    Delete\n                                </button>\n                             </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )     \n}\n\nexport default Home","import React, { useState } from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { createDeck } from \"./utils/api/index\"\n\nfunction CreateDeck () {\n    const history = useHistory()\n    const initialState = {\n        name: \"\",\n        description: \"\",\n    }\n    const [newDeck, setNewDeck] = useState(initialState)\n\n    function handleChange({target}) {\n        setNewDeck({\n            ...newDeck,\n            [target.name]: target.value\n        })\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault()\n        const abortController = new AbortController()\n        const response = await createDeck({...newDeck}, abortController.signal)\n        history.push(\"/\")\n        return response\n    }\n\n    async function handleCancel() {\n        history.push('/')\n    }\n\n\n    return (\n        <div>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">\n                        Home\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item active\">\n                    Create Deck\n                </li>\n            </ol>\n            <form onSubmit={(event) => handleSubmit(event)}>\n                <h1>\n                    Create Deck\n                </h1>\n                <div className=\"form-group\">\n                    <label>\n                        Name\n                    </label>\n                    <input \n                        id=\"name\"\n                        name=\"name\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={newDeck.name}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>\n                        Description\n                    </label>\n                    <textarea \n                        id=\"description\"\n                        name=\"description\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={newDeck.description}\n                    />\n                </div>\n                <button className=\"btn btn-secondary mx-1\" onClick={() => handleCancel()}>\n                    Cancel\n                </button>\n                <button className=\"btn btn-primary mx-1\" type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateDeck","import React, {useState, useEffect} from \"react\"\nimport { Link, useParams, useHistory } from \"react-router-dom\"\nimport { readDeck, deleteDeck, deleteCard } from \"./utils/api/index\"\n\nfunction Deck () {\n    const history = useHistory()\n    const {deckId} = useParams()\n    const [deck, setDeck] = useState({})\n    const [cards, setCards] = useState([])\n\n    useEffect (() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            try {\n                const deckResponse = await readDeck(deckId, abortController.signal)\n                setDeck(deckResponse)\n                setCards(deckResponse.cards)\n            } catch (error) {\n                console.error('Something went wrong', error)\n            }\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n\n    async function handleDeleteDeck(deck) {\n        if (window.confirm(`Delete this deck? You will not be able to recover it`)) {\n            const abortController = new AbortController()\n            try {\n                history.push(\"/\")\n                return await deleteDeck(deck.id, abortController.signal)\n            } catch (error) {\n                console.error('Something went wrong', error)\n            }\n            return() => {\n                abortController.abort()\n            }\n        }\n    }\n\n    async function handleDeleteCard(card) {\n        if (window.confirm(`Delete this card? You will not be able to recover it`)) {\n            const abortController = new AbortController()\n            try {\n                history.go(0)\n                return await deleteCard(card.id, abortController.signal)\n            } catch (error) {\n                console.error('Something went wrong', error)\n            }\n            return() => {\n                abortController.abort()\n            }\n        }     \n    }\n\n    async function handleEditDeck() {\n        history.push(`/decks/${deckId}/edit`)\n    }\n\n    async function handleStudy() {\n        history.push(`/decks/${deckId}/study`)\n    }\n\n    async function handleAddCard() {\n        history.push(`/decks/${deckId}/cards/new`)\n    }\n\n    async function handleEditCard(card) {\n        history.push(`/decks/${deckId}/cards/${card.id}/edit`)\n    }\n\n    if (cards.length > 0) {\n        return (\n            <div>\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\">\n                        <Link to=\"/\">\n                            Home\n                        </Link>\n                    </li>\n                    <li className=\"breadcrumb-item active\">\n                        {deck.name}\n                    </li>\n                </ol>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h2 className=\"card-title\">\n                            {deck.name}\n                        </h2>\n                        <p>\n                            {deck.description}\n                        </p>\n                        <button onClick={() => handleEditDeck()} className=\"btn btn-secondary mx-1\">\n                            Edit\n                        </button>\n                        <button onClick={() => handleStudy()} className=\"btn btn-primary mx-1\">\n                            Study\n                        </button>\n                        <button onClick={() => handleAddCard()}className=\"btn btn-primary mx-1\">\n                            Add Cards\n                        </button>\n                        <button onClick={() => handleDeleteDeck(deck)} className=\"btn btn-danger mx-1\">\n                            Delete\n                        </button>\n                    </div>\n                </div>\n                <h1>\n                    Cards\n                </h1>\n                {cards.map((card) => {\n                    return (\n                        <div className=\"card-deck\" key={card.id}>\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            {card.front}\n                                        </div>\n                                        <div className=\"col\">\n                                            {card.back}\n                                        </div>\n                                    </div>\n                                    <div className=\"container row\">\n                                        <button onClick={() => handleEditCard(card)} className=\"btn btn-secondary mx-1\">\n                                            Edit\n                                        </button>\n                                        <button onClick={() => handleDeleteCard(card)} className=\"btn btn-danger mx-1\">\n                                            Delete\n                                        </button>\n                                    </div>\n                                </div>                                \n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    } else {\n        return (null)\n    }\n}\n\nexport default Deck","import React, { useEffect, useState } from \"react\"\nimport { Link, useParams, useHistory } from \"react-router-dom\"\nimport { readDeck } from \"./utils/api/index\"\n\n\nfunction Study () {\n    const {deckId} = useParams()\n    const [deck, setDeck] = useState({})\n    const [cards, setCards] = useState([])\n    const [cardNumber, setCardNumber] = useState(1)\n    const [front, isFront] = useState(true)\n    const history = useHistory()\n\n    useEffect (() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            const response = await readDeck(deckId, abortController.signal)\n            setDeck(response)\n            setCards(response.cards)\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n\n    function nextCard(index, total) {\n        console.log(index)\n        if (index < total) {\n            setCardNumber(cardNumber + 1)\n            isFront(true)\n        } else {\n            if (window.confirm(`Restart cards? Click 'cancel' to return to the home page`)) {\n                setCardNumber(1)\n                isFront(true)\n            } else {\n                history.push(\"/\")\n            }\n        }\n    }\n\n    function flipCard() {\n        if (front) {\n            isFront(false)\n        } else {\n            isFront(true)\n        }\n    }\n\n    function showNextButton(cards, index) {\n        if (front) {\n            return null\n        } else {\n            return (\n                <button onClick={() => nextCard(index + 1, cards.length)} className=\"btn btn-primary mx-1\">\n                    Next\n                </button>\n            )\n        }\n    }\n\n    function enoughCards() {\n        return (\n            <div className=\"card\">\n                {cards.map((card, index) => {\n                    if (index === cardNumber - 1) {\n                        return (\n                            <div className=\"card-body\" key={card.id}>\n                                <div className=\"card-title\">\n                                    {`Card ${index + 1} of ${cards.length}`}\n                                </div>\n                                <div className=\"card-text\">\n                                    {front ? card.front : card.back}\n                                </div>\n                                <button onClick={flipCard} className=\"btn btn-secondary mx-1\">\n                                    Flip\n                                </button>\n                                {showNextButton(cards, index)}\n                            </div>\n                        )\n                    }\n                })}\n            </div>\n        )\n    }\n\n    function notEnoughCards() {\n        return (\n            <div>\n                <h2>\n                    Not enough cards.\n                </h2>\n                <p>\n                    You need at least 3 cards to study. There are {cards.length} cards in this deck.\n                </p>\n                <Link to={`/decks/${deck.id}/cards/new`} className=\"btn btn-primary mx-1\">\n                    Add Cards\n                </Link>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">\n                        Home\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deckId}`}>\n                        {deck.name}\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item active\">\n                    Study\n                </li>\n            </ol>\n            <div>\n                <h2>\n                    {`${deck.name}: Study`}\n                </h2>\n                <div>\n                    {cards.length === 0 ? notEnoughCards() : cards.length > 2 ? enoughCards() : notEnoughCards()}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Study","import React, { useState, useEffect }from \"react\"\nimport { Link, useParams, useHistory } from \"react-router-dom\"\nimport { readDeck, updateDeck } from \"./utils/api/index\"\n\nfunction EditDeck () {\n    const {deckId} = useParams()\n    const history = useHistory()\n    const initialDeckState = {\n        id: \"\",\n        name: \"\",\n        description: \"\"\n    }\n    const [deck, setDeck] = useState(initialDeckState)\n\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            try {\n                const response = await readDeck(deckId, abortController.signal)\n                setDeck(response)\n            } catch (error) {\n                console.error('Something went wrong', error)\n            }\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n\n    \n    function handleChange({target}) {\n        setDeck({\n            ...deck,\n            [target.name]: target.value\n        })\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault()\n        const abortController = new AbortController()\n        const response = await updateDeck({...deck}, abortController.signal)\n        history.push(`/decks/${deckId}`)\n        return response\n    }\n\n    async function handleCancel() {\n        history.push(`/decks/${deckId}`)\n    }\n\n\n    return (\n        <div>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">\n                        Home\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deckId}`}>\n                        {deck.name}\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item active\">\n                    Edit Deck\n                </li>\n            </ol>\n            <form onSubmit={handleSubmit}>\n                <h1>\n                    Edit Deck\n                </h1>\n                <div className=\"form-group\">\n                    <label>\n                        Name\n                    </label>\n                    <input \n                        id=\"name\"\n                        name=\"name\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={deck.name}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>\n                        Description\n                    </label>\n                    <textarea \n                        id=\"description\"\n                        name=\"description\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={deck.description}\n                    />\n                </div>\n                <button className=\"btn btn-secondary mx-1\" onClick={() => handleCancel()}>\n                    Cancel\n                </button>\n                <button className=\"btn btn-primary mx-1\" type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default EditDeck","import React, { useState, useEffect } from \"react\"\nimport { Link, useHistory, useParams } from \"react-router-dom\"\nimport { createCard, readDeck } from \"./utils/api/index\"\n\nfunction AddCard () {\n    const {deckId} = useParams()\n    const history = useHistory()\n    const initialState = {\n        front: \"\",\n        back: \"\",\n    }\n\n    const [newCard, setNewCard] = useState(initialState)\n    const [deck, setDeck] = useState({})\n\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            try {\n            const response = await readDeck(deckId, abortController.signal)\n            setDeck(response)\n            } catch (error) {\n                console.error('Something went wrong', error)\n            }\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n    \n    function handleChange({target}) {\n        setNewCard({\n            ...newCard,\n            [target.name]: target.value\n        })\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault()\n        const abortController = new AbortController()\n        const response = await createCard(deckId, {...newCard}, abortController.signal)\n        history.go(0)\n        setNewCard(initialState)\n        return response\n    }\n\n    async function handleDone() {\n        history.push(`/decks/${deckId}`)\n    }\n\n\n    return (\n        <div>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">\n                        Home\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deckId}`}>\n                        {deck.name}\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item active\">\n                    Add Card\n                </li>\n            </ol>\n            <form onSubmit={handleSubmit}>\n                <h2>\n                    {deck.name}: Add Card\n                </h2>\n                <div className=\"form-group\">\n                    <label>\n                        Front\n                    </label>\n                    <textarea \n                        id=\"front\"\n                        name=\"front\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={newCard.front}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>\n                        Back\n                    </label>\n                    <textarea \n                        id=\"back\"\n                        name=\"back\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={newCard.back}\n                    />\n                </div>\n                <button className=\"btn btn-secondary mx-1\" onClick={() => handleDone()}>\n                    Done\n                </button>\n                <button className=\"btn btn-primary mx-1\" type=\"submit\">\n                    Save\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default AddCard","import React, { useState, useEffect } from \"react\"\nimport { Link, useHistory, useParams} from \"react-router-dom\"\nimport { readCard, readDeck, updateCard} from \"./utils/api/index\"\n\nfunction EditCard () {\n    const { deckId, cardId } = useParams()\n    const history = useHistory()\n    const initialDeckState = {\n        id: \"\",\n        name: \"\",\n        description: \"\"\n    }\n    const initialCardState = {\n        id: \"\",\n        front: \"\",\n        back: \"\",\n        deckId: \"\"\n    }\n\n\n    const [card, setCard] = useState(initialDeckState)\n    const [deck, setDeck] = useState(initialCardState)\n\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController()\n            try {\n                const cardResponse = await readCard(cardId, abortController.signal)\n                const deckResponse = await readDeck(deckId, abortController.signal)\n                setCard(cardResponse)\n                setDeck(deckResponse)\n            } catch (error) {\n                console.error('Something went wrong', error)\n            }\n            return() => {\n                abortController.abort()\n            }\n        }\n        fetchData()\n    }, [])\n    \n    function handleChange({target}) {\n        setCard({\n            ...card,\n            [target.name]: target.value\n        })\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault()\n        const abortController = new AbortController()\n        const response = await updateCard({...card}, abortController.signal)\n        history.push(`/decks/${deckId}`)\n        return response\n    }\n\n    async function handleCancel() {\n        history.push(`/decks/${deckId}`)\n    }\n\n\n    return (\n        <div>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">\n                        Home\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deckId}`}>\n                        {deck.name}\n                    </Link>\n                </li>\n                <li className=\"breadcrumb-item active\">\n                    Edit Card {cardId}\n                </li>\n            </ol>\n            <form onSubmit={handleSubmit}>\n                <h2>\n                    Edit Card\n                </h2>\n                <div className=\"form-group\">\n                    <label>\n                        Front\n                    </label>\n                    <textarea \n                        id=\"front\"\n                        name=\"front\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={card.front}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>\n                        Back\n                    </label>\n                    <textarea \n                        id=\"back\"\n                        name=\"back\"\n                        className=\"form-control\"\n                        onChange={handleChange} \n                        type=\"text\"\n                        value={card.back}\n                    />\n                </div>\n                <button className=\"btn btn-secondary mx-1\" onClick={() => handleCancel()}>\n                    Cancel\n                </button>\n                <button className=\"btn btn-primary mx-1\" type=\"submit\">\n                    Save\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default EditCard","import React from \"react\";\nimport { Switch, Route} from \"react-router-dom\"\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"../Home\"\nimport CreateDeck from \"../CreateDeck\";\nimport Deck from \"../Deck\"\nimport Study from \"../Study\"\nimport EditDeck from \"../EditDeck\"\nimport AddCard from \"../AddCard\"\nimport EditCard from \"../EditCard\"\n\nfunction Layout() {\n    return (\n        <>\n            <Header />\n            <div className=\"container\">\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home />\n                    </Route>\n                    <Route path=\"/decks/new\">\n                        <CreateDeck />\n                    </Route>\n                    <Route exact path=\"/decks/:deckId\">\n                        <Deck />\n                    </Route>\n                    <Route path=\"/decks/:deckId/study\">\n                        <Study />\n                    </Route>\n                    <Route path=\"/decks/:deckId/edit\">\n                        <EditDeck />\n                    </Route>\n                    <Route path=\"/decks/:deckId/cards/new\">\n                        <AddCard />\n                    </Route>\n                    <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n                        <EditCard />\n                    </Route>\n                    <NotFound />\n                </Switch>\n            </div>\n        </>\n    );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\nfunction App() {\n    return (\n        <div className=\"app-routes\">\n            <Switch>\n                <Route path=\"/\">\n                    <Layout />\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}